<HBProfile xsi:noNamespaceSchemaLocation="../../Schemas/QuestProfileSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>Paladin - Holy - The Silver Hand ($Rev: 5789 $)</Name>

	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>

	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>

	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>

	<TargetElites>true</TargetElites>

	<AvoidMobs>
	</AvoidMobs>

	<Blackspots>
	</Blackspots>

	<Blacklist>
	</Blacklist>

	<Mailboxes> 
	</Mailboxes>

	<Vendors>
	</Vendors>

<!-- INITORDER COMMENT 
	<InitOrder>
		Perhaps add detection for loading the class hall if player hasn't unlocked this zone yet.
		<Code File="Misc\RunLua" Lua="SetCVar('AutoLootDefault', 1)" />

		<Code File="EnablePlugin" Names="Anti Drown" />
		<Code File="EnablePlugin" Names="Refreshment Detection" />

		<Code File="Misc\ProfileCompatibilityInfo" AllowBrokenAddOns="true" AllowBrokenPlugIns="true" />

		<LootMobs Value="true" />
		<TargetingDistance Value="45" /> Use LevelBot default
	</InitOrder>
END INITORDER COMMENT -->

	<QuestOrder>
		<!-- Check function status -->
			<Code File="RunCode" Type="Definition" >
				<![CDATA[
					bool? profileFunctionsEnabled => (bool?)AppDomain.CurrentDomain.GetData("QuestingProfiles_FunctionsEnabled");
				]]>
			</Code>
			<If Condition="profileFunctionsEnabled == null || profileFunctionsEnabled == false" >
				<Code File="RunCode">
					<![CDATA[ Bots.Professionbuddy.PBLog.Log(Colors.MediumPurple, "[Profile Message!]: ", Colors.Yellow, "Please stand by as the functions are being activated!"); ]]>
				</Code>
				<Code File="LoadProfile" ProfileName="..\..\Functions\Activate Functions.xml" />
			</If>
		<!-- END Check function status -->

		<If Condition="Me.IsAlliance" >
			<Code File="LoadProfile" ProfileName="..\..\1-110 Autoloader.xml" RememberProfile="true" />
		</If>
		<!-- RunCode Methods -->
			<Code File="RunCode">
			<![CDATA[
				Bots.Professionbuddy.PBLog.Log(System.Windows.Media.Colors.MediumPurple, "> [Profile Initialization Status] ", System.Windows.Media.Colors.CornflowerBlue, "\n     Auto-Looting	:: Enabled\n     Looting	:: Enabled\n     Game Addons	:: Disabled");
				Lua.DoString("SetCVar('AutoLootDefault', 1);");
				Lua.DoString("SetCVar('autoDismountFlying', 1);");
				CharacterSettings.Instance.LootMobs = true;
				CharacterSettings.Instance.Save();
				Lua.DoString("for i=1,GetNumAddOns() do local relo=false if IsAddOnLoaded(i) then relo=true DisableAddOn(i) end if relo then relo=nil ReloadUI() end end");
				await Coroutine.Sleep(1500);
				Logging.Write(System.Windows.Media.Colors.MediumPurple, "> [Ready to bot!]");
			]]>
			</Code>
			<Code File="RunCode" Type="Definition">
				<![CDATA[
						bool DoQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (HasQuest(questId) && !IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool NeedsQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (!HasQuest(questId) && !IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool NeedsBreadcrumbQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (IsQuestCompleted(questId)) return false;
							}
							return true;
						}
						bool QuestDone(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (HasQuest(questId) && IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool QuestFlaggedCompleted(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								return Lua.GetReturnVal<bool>($"return IsQuestFlaggedCompleted({questId});", 0);
							}
							return false;
						}
						async Task SkipCutscene(int preWait = 3000, int postWait = 3000)
						{
					// Add detection of cutscene here.
							await Coroutine.Sleep(preWait);
					// Test and improve the working method.
							Lua.DoString("MovieFrame:StopMovie(); CinematicFrame_CancelCinematic(); StopCinematic();");
							await Coroutine.Sleep(postWait);
						}
					]]>
			</Code>
		<!-- END RunCode Methods -->

		<!-- Heal Routine -->
			<Code File="RunCode" Type="Definition"><![CDATA[
					WoWUnit CleansePriority()
					{
						return ObjectManager.GetObjectsOfType<WoWUnit>(true, true).Where(x => new[]{106429, 106676, 106933, 106721, 106772}.Contains((int)x.Entry) || x.IsMe).OrderBy(x => x.GetPredictedHealthPercent(true)).FirstOrDefault(x => x.HasAura("Bound in Void"));
					}

					WoWUnit HealPriority()
					{
						return ObjectManager.GetObjectsOfType<WoWUnit>(true, true).Where(x => new[]{106429, 106676, 106370, 106371}.Contains((int)x.Entry) || x.IsMe).OrderBy(x => x.GetPredictedHealthPercent(true)).FirstOrDefault();
					}

					WoWUnit HealPriorityTwo()
					{
						return ObjectManager.GetObjectsOfType<WoWUnit>(true, true).Where(x => new[]{106429, 106676, 106933, 106721, 106772}.Contains((int)x.Entry) || x.IsMe).OrderBy(x => x.GetPredictedHealthPercent(true)).FirstOrDefault();
					}

					WoWUnit HealPriorityThree()
					{
						return ObjectManager.GetObjectsOfType<WoWUnit>(true, true).Where(x => new[]{106774, 114243, 114242, 106775}.Contains((int)x.Entry) || x.IsMe).OrderBy(x => x.GetPredictedHealthPercent(true)).FirstOrDefault();
					}

					async Task HealRoutine(WoWUnit healMe)
					{
						if (healMe == null) return;
						await Coroutine.Wait(3000, () => !StyxWoW.Me.IsCasting && !SpellManager.GlobalCooldown);

						if (CleansePriority() != null && SpellManager.CanCast(4987))
						{
							WoWUnit cleanseMe = CleansePriority();
							if (StyxWoW.Me.CurrentTarget != cleanseMe) { cleanseMe.Target(); }
							StyxWoW.Me.SetFacing(cleanseMe.Location);
							await Coroutine.Sleep(385);

							SpellManager.Cast(4987);
							return;
						}

						if (StyxWoW.Me.CurrentTarget != healMe) { healMe.Target(); }
						StyxWoW.Me.SetFacing(healMe.Location);
						await Coroutine.Sleep(385);


						while (healMe.Distance >= 39)
						{
							Navigator.MoveTo(healMe.Location);
							await Coroutine.Yield();
						}

						if (healMe.HealthPercent <= 20)
						{
							Logging.Write(System.Windows.Media.Colors.Yellow, $"[PRoutine]: Light of the Martyr on {healMe.Name}  @ {(int)healMe.HealthPercent}% HP");
							SpellManager.Cast("Light of the Martyr");
							return;
						}

						if (SpellManager.CanCast("Holy Light") && StyxWoW.Me.HasAura(53576)) 
						{	// Infusion of Light.
							Logging.Write(System.Windows.Media.Colors.Yellow, $"[PRoutine]: Holy Light on {healMe.Name}  @ {(int)healMe.HealthPercent}% HP");
							SpellManager.Cast("Holy Light");
							return;
						}

						if (SpellManager.CanCast("Holy Shock")) 
						{
							Logging.Write(System.Windows.Media.Colors.Yellow, $"[PRoutine]: Holy Shock on {healMe.Name}  @ {(int)healMe.HealthPercent}% HP");
							SpellManager.Cast("Holy Shock");
							return;
						}

						if (SpellManager.CanCast("Light of Dawn") && healMe.Distance < 19) 
						{
							Logging.Write(System.Windows.Media.Colors.Yellow, $"[PRoutine]: Light of Dawn on {healMe.Name}  @ {(int)healMe.HealthPercent}% HP");
							SpellManager.Cast("Light of Dawn");
							return;
						}

						if (SpellManager.CanCast("Bestow Faith")) 
						{	//Talent Ability
							Logging.Write(System.Windows.Media.Colors.Yellow, $"[PRoutine]: Bestow Faith on {healMe.Name}  @ {(int)healMe.HealthPercent}% HP");
							SpellManager.Cast("Bestow Faith");
							return;
						}

						if (SpellManager.CanCast("Light's Hammer")) 
						{	//Talent Ability
							Logging.Write(System.Windows.Media.Colors.Yellow, $"[PRoutine]: Light's Hammer on {healMe.Name}  @ {(int)healMe.HealthPercent}% HP");
							SpellManager.Cast("Light's Hammer");
							SpellManager.ClickRemoteLocation(healMe.Location);
							return;
						}

						if (SpellManager.CanCast("Flash of Light")) 
						{
							Logging.Write(System.Windows.Media.Colors.Yellow, $"[PRoutine]: Flash of Light on {healMe.Name}  @ {(int)healMe.HealthPercent}% HP");
							SpellManager.Cast("Flash of Light");
							return;
						}

					}
				]]>
			</Code>
		<!-- END Heal Routine -->

		<!-- Get Continuation Quest -->
		<!-- END Get Continuation Quest -->

		<!-- Second Artifact -->
		<!-- END Second Artifact -->

		<!-- Third Artifact -->
		<!-- END Third Artifact -->

		<!-- Story: Artifact Weapon - The Silver Hand -->
			<Code File="UserDialog" AllowBotStop="True" SoundCue="Exclamation" SoundCueInterval="1" Text=":::WARNING\n\nIf you are seeing this message, then that means this artifact profile has NOT been tested yet.\n\nPlease do not report bugs for this profile until this message is no longer visible." />
			<!-- NOTE: <TechnicalCheck> : These NPC locations will vary depending on if this is the player's first artifact weapon or not.
											This current XYZ/Id is for the first artifact weapon.  Add support for other artifact quests later. -->
			<PickUp QuestName="The Mysterious Paladin" QuestId="42231" GiverName="Lord Maxwell Tyrosus" GiverId="90369" X="-847.9688" Y="4256.457" Z="746.282" />
			<!-- END: <Technical Check -->
			<TurnIn QuestName="The Mysterious Paladin" QuestId="42231" TurnInName="Travard" TurnInId="106337" X="-853.9722" Y="4280.39" Z="746.2767" />

			<PickUp QuestName="The Brother's Trail" QuestId="42377" GiverName="Travard" GiverId="106337" X="-853.9722" Y="4280.39" Z="746.2767" />
			<While Condition="DoQuest(42377)" >
				<If Condition="Me.MapId != 571" > <!-- Go to Northrend -->
					<If Condition="Me.Z &gt; 605" > <!-- NOTE: <CheckFunction> : Dalaran to Dalaran Portal Room -->
						<MoveTo X="-847.6401" Y="4463.277" Z="735.8799" />
						<Code File="MyCTM" X="-844.5972" Y="4467.76" Z="736.0415" TerminateWhen="Me.Z &lt;= 605" />
					</If>
					<MoveTo X="-889.9857" Y="4504.066" Z="580.149" />
					<Code File="InteractWith" MobId="246013" WaitTime="1000" X="-892.7344" Y="4506.432" Z="580.4584" />
				</If>
				<Code File="InteractWith" MobId="107289" GossipOptions="1,1" QuestId="42377" QuestObjectiveIndex="2" X="3590.153" Y="264.9774" Z="340.8468" />
				<Code File="InteractWith" MobId="250367" QuestId="42377" QuestObjectiveIndex="3" X="4563.012" Y="472.8004" Z="65.67351" />
				<Code File="WaitTimer" WaitTime="30000" TerminateWhen="Unit(107359, u =&gt; u.CanInteract) != null" />
				<Code File="InteractWith" MobId="107359" GossipOptions="1" QuestId="42377" QuestObjectiveIndex="4" X="4152.026" Y="203.2708" Z="32.61091" />
				<Code File="KillUntilComplete" MobId="107361" QuestId="42377" QuestObjectiveIndex="6" X="4163.058" Y="193.9149" Z="32.59358" />
				<Code File="InteractWith" MobId="107387" WaitTime="5000" QuestId="42377" QuestObjectiveIndex="7" X="4148.617" Y="196.2604" Z="32.5923" />
				<Code File="InteractWith" MobId="107395" QuestId="42377" QuestObjectiveIndex="8" X="4146.73" Y="209.1667" Z="32.59276" />
				<Code File="WaitTimer" QuestId="42377" WaitTime="30000" />
			</While>
			<TurnIn QuestName="The Brother's Trail" QuestId="42377" TurnInName="Travard" TurnInId="106337" X="-853.9722" Y="4280.39" Z="746.2758" />

			<PickUp QuestName="The Silver Hand" QuestId="42120" GiverName="Travard" GiverId="106337" X="-853.9722" Y="4280.39" Z="746.2758" />
			<While Condition="DoQuest(42120)" >
				<If Condition="Me.MapId != 0" >
					<If Condition="Me.Z &gt; 605" > <!-- NOTE: <CheckFunction> : Dalaran to Dalaran Portal Room -->
						<MoveTo X="-847.6401" Y="4463.277" Z="735.8799" />
						<Code File="MyCTM" X="-844.5972" Y="4467.76" Z="736.0415" TerminateWhen="Me.Z &lt;= 605" />
					</If>
					<MoveTo X="-881.0235" Y="4507.995" Z="580.1562" />
					<Code File="InteractWith" MobId="246008" WaitTime="1000" X="-880.408" Y="4511.733" Z="580.4584" />
					<Code File="RunCode" Code="SpellManager.Cast(1022);" /> <!-- Ice Block to prevent fall damage. -->
					<Code File="WaitTimer" WaitTime="10000" TerminateWhen="!Me.IsFalling" />
				</If>

				<MoveTo X="2130.502" Y="2415.371" Z="119.1868" />

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 1" >
					<Code File="WaitTimer" WaitTime="60000" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 1" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 2" >
					<DisableBehavior Name="Combat" />
					<Code File="RunCode" Code="
							var travardPoi = Unit(106429);
							if (travardPoi != null)
							{
								StyxWoW.Me.SetFacing(travardPoi.Location);
								await Coroutine.Sleep(550);
								SpellManager.Cast(53563);
							}
					" />
					<Code File="InteractWith" MobId="106429" GossipOptions="1" X="2135.413" Y="2396.899" Z="118.6831" />
					<!-- NOTE: <Improve> : I don't like using CTM at all.  Need a better way of swimming into this cave.
											Also, this shouldn't execute after entering the cave.

											This logic is also used in Priest-Shadow stage 2. -->
					<Code File="MyCTM" X="2148.117" Y="2335.397" Z="100.6413" />
					<Code File="MyCTM" X="2145.281" Y="2336.206" Z="84.55514" />
					<Code File="MyCTM" X="2128.243" Y="2341.831" Z="67.68755" />
					<Code File="MyCTM" X="2109.654" Y="2353.573" Z="61.65699" />
					<Code File="MyCTM" X="2090.664" Y="2358.6" Z="65.91748" />
					<Code File="MyCTM" X="2052.529" Y="2343.071" Z="65.91656" />
					<MoveTo X="1995.469" Y="2337.511" Z="75.41196" />
					<MoveTo X="2017.057" Y="2337.056" Z="75.20841" />

					<Code File="RunCode"><![CDATA[
							var facelessOnePoi = Unit(106579);

							while (facelessOnePoi != null && facelessOnePoi.IsAlive)
							{
								await HealRoutine(HealPriority());
								await Coroutine.Yield();
							}

						]]> <!-- Can check stage number here instead of IsAlive on facelessOne -->
					</Code>
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 3" >
					<DisableBehavior Name="Combat" />
					<MoveTo X="1983.811" Y="2315.763" Z="75.6478" />
					<Code File="RunCode"><![CDATA[
							while (Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 3)
							{
								await HealRoutine(HealPriority());
								await Coroutine.Yield();
							}

						]]>
					</Code>
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 4" >
					<Code File="WaitTimer" WaitTime="45000" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 4" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 5" >
					<Code File="InteractWith" MobId="106639" GossipOptions="1" X="1919.245" Y="2335.285" Z="75.41187" />
					<Code File="RunCode" Code="
							var travardPoi = Unit(106429);
							if (travardPoi != null)
							{
								StyxWoW.Me.SetFacing(travardPoi.Location);
								await Coroutine.Sleep(550);
								SpellManager.Cast(53563);
							}
					" />

					<MoveTo X="1841.984" Y="2310.984" Z="47.47279" />
					<Code File="RunCode"><![CDATA[
							var facelessOnePoi = Unit(106580);
							while (facelessOnePoi != null && facelessOnePoi.IsAlive)
							{
								await HealRoutine(HealPriority());
								await Coroutine.Yield();
							}
						]]>
					</Code>

					<MoveTo X="1876.864" Y="2247.225" Z="37.40902" />
					<Code File="RunCode"><![CDATA[
							while (Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 5)
							{
								await HealRoutine(HealPriority());
								await Coroutine.Yield();
							}
						]]>
					</Code>
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 6" >
					<MoveTo X="1877.412" Y="2207.217" Z="37.89267" />
					<Code File="RunCode"><![CDATA[
							var aberrationPoi = Unit(106669);
							while (aberrationPoi != null && aberrationPoi.IsAlive)
							{
								await HealRoutine(HealPriority());
								await Coroutine.Yield();
							}
						]]>
					</Code>
					<Code File="WaitTimer" WaitTime="15000" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 6" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 7 || Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 8" >
					<MoveTo X="1842.87" Y="2297.398" Z="46.91503" />
					<Code File="RunCode"><![CDATA[
							while (Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 7 || Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 8)
							{
								await HealRoutine(HealPriorityTwo());
								await Coroutine.Yield();
							}
						]]>
					</Code>
				</If>

				<!-- What happened to stage 8?  Merging it with 7. -->

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 9" >
					<MoveTo X="1939.908" Y="2335.485" Z="75.55592" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 10" >
					<DisableBehavior Name="Combat" />
					<MoveTo X="1943.578" Y="2335.527" Z="75.41199" />
					<Code File="RunCode"><![CDATA[
							while (Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 10)
							{
								await HealRoutine(HealPriorityThree());
								await Coroutine.Yield();
							}
						]]> <!-- Heals don't really matter here.  Player can just AFK and it will complete on its own. -->
					</Code>
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 11" >
					<Code File="InteractWith" MobId="249824" InteractByLooting="true" WaitTime="1500" X="1962.938" Y="2336.663" Z="80.27976" />
					<Code File="Misc\RunLua" Lua="LootButton1:Click();" /> <!-- Extra code in case the IW doesn't loot. -->
					<Code File="WaitTimer" WaitTime="12000" /> <!-- Wait for little cinematic. -->
					<Code File="RunCode" Code="await SkipCutscene();" />
				</If>

				<If Condition="!IsObjectiveComplete(4, 42120)" >
					<Code File="InteractWith" MobId="106421" X="2107.542" Y="2444.49" Z="119.6482" />
					<Code File="WaitTimer" WaitTime="17000" />
				</If>
			</While>
			<TurnIn QuestName="The Silver Hand" QuestId="42120" TurnInName="Lord Maxwell Tyrosus" TurnInId="106834" X="-830.2917" Y="4282.151" Z="746.2611" />
		<!-- END Story: Artifact Weapon - The Silver Hand -->


		<If Condition="!IsQuestCompleted(38566)" >
			<Code File="LoadProfile" ProfileName="../Class Hall Loaders/Paladin.xml" />
		</If>

	</QuestOrder>
</HBProfile>

<!-- Notes:

	A United Force (38566) is used to determine if we've got the first artifact or not because NPC positions change after this quest.
	Checking if this quest is completed can be used to determine where the NPCs are at for the bot and where we should look for them.
	A United Force (38566) is completed directly after completing obtaining your first artifact weapon, so it should be reliable enough to check with.

	Contiuing the Legend is the quest to unlock your second artifact choice.

	One Last Adventure is the quest to unlock your third artifact choice.
-->