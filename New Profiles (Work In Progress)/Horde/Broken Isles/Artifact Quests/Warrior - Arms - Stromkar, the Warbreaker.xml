<HBProfile xsi:noNamespaceSchemaLocation="../../Schemas/QuestProfileSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>Warrior - Arms - Stromkar, the Warbreaker ($ShortHash$)</Name>

	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>

	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>

	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>

	<TargetElites>true</TargetElites>

	<AvoidMobs>
	</AvoidMobs>

	<Blackspots>
	</Blackspots>

	<Blacklist>
	</Blacklist>

	<Mailboxes> 
	</Mailboxes>

	<Vendors>
	</Vendors>

<!-- INITORDER COMMENT 
	<InitOrder>
		Perhaps add detection for loading the class hall if player hasn't unlocked this zone yet.
		<Code File="Misc\RunLua" Lua="SetCVar('AutoLootDefault', 1)" />

		<Code File="EnablePlugin" Names="Anti Drown" />
		<Code File="EnablePlugin" Names="Refreshment Detection" />

		<Code File="Misc\ProfileCompatibilityInfo" AllowBrokenAddOns="true" AllowBrokenPlugIns="true" />

		<LootMobs Value="true" />
		<TargetingDistance Value="45" /> Use LevelBot default
	</InitOrder>
END INITORDER COMMENT -->

	<QuestOrder>
		<!-- Check function status -->
		<Code File="RunCode" Type="Definition">
			<![CDATA[
			private static bool? profileFunctionsEnabled => (bool?)AppDomain.CurrentDomain.GetData("QuestingProfiles_FunctionsEnabled");
			private static bool IsStoreProfile(string path) => path.StartsWith("store://");
			private static string Slashify(string path) => IsStoreProfile(path) ? path.Replace(@"\", "/") : path.Replace("/", @"\");

			public __CompiledBatchClass__()
			{
				if (profileFunctionsEnabled == null || profileFunctionsEnabled == false)
				{
					Bots.Professionbuddy.PBLog.Log(Colors.MediumPurple, "[Profile Message!]: ", Colors.Yellow, "Please stand by as the functions are being activated!");
					LoadProfile(@"..\..\..\Functions\Activate Functions.xml");
				}
			}

			private static void LoadProfile(string path)
			{
				var profile = GetNewPath(path);
				if (!IsStoreProfile(profile) && !File.Exists(profile))
				{
					Bots.Professionbuddy.PBLog.Log(Colors.MediumPurple, "[Profile Message!]: ", Colors.Yellow, "Profile does not exist.\n" + profile);
					return;
				}

				Bots.Professionbuddy.PBLog.Log(Colors.MediumPurple, "[Profile Message!]: ", Colors.Yellow, "Loading: " + profile);
				ProfileManager.LoadNew(profile, false);
			}

			private static string GetNewPath(string path)
			{
				if (IsStoreProfile(path))
					return Slashify(path);

				var currentProfile = ProfileManager.XmlLocation;
				if (IsStoreProfile(currentProfile))
					return Slashify(currentProfile + "/../" + path);

				var absolutePath = Path.Combine(Path.GetDirectoryName(currentProfile), path);
				absolutePath = Path.GetFullPath(absolutePath);
				var canonicalPath = new Uri(absolutePath).LocalPath;
				return Slashify(canonicalPath);
			}]]>
		</Code>
		<!-- END Check function status -->

		<If Condition="Me.IsAlliance" >
			<Code File="LoadProfile" ProfileName="..\..\..\1-110 Autoloader.xml" />
		</If>
		<!-- RunCode Methods -->
			<Code File="RunCode">
			<![CDATA[
				Bots.Professionbuddy.PBLog.Log(System.Windows.Media.Colors.MediumPurple, "> [Profile Initialization Status] ", System.Windows.Media.Colors.CornflowerBlue, "\n     Auto-Looting	:: Enabled\n     Looting	:: Enabled\n     Game Addons	:: Disabled");
				Lua.DoString("SetCVar('AutoLootDefault', 1);");
				Lua.DoString("SetCVar('autoDismountFlying', 1);");
				CharacterSettings.Instance.LootMobs = true;
				CharacterSettings.Instance.Save();
				Lua.DoString("for i=1,GetNumAddOns() do local relo=false if IsAddOnLoaded(i) then relo=true DisableAddOn(i) end if relo then relo=nil ReloadUI() end end");
				await Coroutine.Sleep(1500);
				Logging.Write(System.Windows.Media.Colors.MediumPurple, "> [Ready to bot!]");
			]]>
			</Code>
			<Code File="RunCode" Type="Definition">
				<![CDATA[
						bool DoQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (HasQuest(questId) && !IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool NeedsQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (!HasQuest(questId) && !IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool NeedsBreadcrumbQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (IsQuestCompleted(questId)) return false;
							}
							return true;
						}
						bool QuestDone(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (HasQuest(questId) && IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool QuestFlaggedCompleted(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								return Lua.GetReturnVal<bool>($"return IsQuestFlaggedCompleted({questId});", 0);
							}
							return false;
						}
						async Task SkipCutscene(int preWait = 3000, int postWait = 3000)
						{
					// Add detection of cutscene here.
							await Coroutine.Sleep(preWait);
					// Test and improve the working method.
							Lua.DoString("MovieFrame:StopMovie(); CinematicFrame_CancelCinematic(); StopCinematic();");
							await Coroutine.Sleep(postWait);
						}
					]]>
			</Code>
		<!-- END RunCode Methods -->

		<!-- Get Continuation Quest -->
			<If Condition="IsQuestCompleted(39530) &amp;&amp; !HasQuest(123456) &amp;&amp; !HasQuest(123456)" > <!-- Using The Forgening (39530) to determine if we've already got the first artifact. -->
				<Code File="InteractWith" MobId="96469" WaitTime="1250" X="796.1858" Y="7228.977" Z="106.7501" />
				<Code File="Misc\RunLua" WaitTime="1250" Lua="QuestFrameAcceptButton:Click();" />
			</If>
		<!-- END Get Continuation Quest -->

		<!-- Second Artifact -->
		<!-- END Second Artifact -->

		<!-- Third Artifact -->
		<!-- END Third Artifact -->

		<!-- Story: Artifact Weapon - Stromkar, the Warbreaker -->
			<PickUp QuestName="The Sword of Kings" QuestId="41105" GiverName="Odyn" GiverId="96469" X="796.1858" Y="7228.977" Z="106.7501" />
			<While Condition="DoQuest(41105)" >
				<If Condition="Me.MapId == 1479" > <!-- NOTE: <CheckID> : Warrior Class Hall to Dalaran -->
					<Code File="InteractWith" MobId="96679" GossipOptions="1" X="1082.998" Y="7229.331" Z="98.11845" />
					<!-- NOTE: <CheckMe> : As a warrior learns more locations throughout Draenor, the gossip options for the Stormflgiht master will change.
											We need a way to actually click by name instead of index.
					-->
				</If>
				<If Condition="Me.MapId != 0 &amp;&amp; Me.MapId != 1539" > <!-- NOTE: <CheckMapIds> : Dalaran to Dalaran Crater -->
					<If Condition="Me.Z &gt; 605" > <!-- NOTE: <CheckFunction> : Dalaran to Dalaran Portal Room -->
						<MoveTo X="-850.0136" Y="4460.374" Z="735.6611" />
						<Code File="MyCTM" X="-844.5972" Y="4467.76" Z="736.0415" TerminateWhen="Me.Z &lt;= 605" />
					</If>
					<MoveTo X="-881.3472" Y="4505.167" Z="580.0989" />
					<Code File="InteractWith" MobId="246008" X="-880.408" Y="4511.733" Z="580.4584" />
					<Code File="WaitTimer" WaitTime="10000" TermianteWhen="Me.MapId == 0" /> <!-- NOTE: Terminate when player is in Dalaran Crater -->
					<Code File="RunCode"><![CDATA[
							SpellManager.Cast("Heroic Leap");
							await Coroutine.Sleep(2500);
							SpellManager.ClickRemoteLocation(new WoWPoint(303.3394, 353.8593, -65.48834));

						]]>
					</Code>
				</If>

		<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 1 || Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 0" >
		  <!--<Code File="Message" Text="Arms Quest Started" LogColor="White" />
		</If>
				<If Condition="!IsObjectiveComplete(3, 41105)" > -->
					<MoveTo Nav="Fly" DestName="The Whispering Forest" X="2030.779" Y="2429.772" Z="133.3699" />
		  <MoveTo DestName="The Ghost King" X="2100.453" Y="2433.33" Z="118.8875" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 1 || Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 2" >
					<!-- Checking 1 and 2 because upon entering the area, 1 seemed to have "went away?" -->
		  <Code File="KillUntilComplete" MobIds="101122, 101127, 101875" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 1 &amp;&amp; Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 2" >
			<HuntingGrounds>
			  <Hotspot Name="The Ghost King 0" X="2100.453" Y="2433.33" Z="118.8875" />
			  <Hotspot Name="The Ghost King 1" X="2130.445" Y="2420.438" Z="119.1646" />
			</HuntingGrounds>
		  </Code>
				</If>


				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 3" >
					<MoveTo X="2136.209" Y="2397.321" Z="118.6385" />
					<Code File="WaitTimer" WaitTime="60000" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 3" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 4" >
					<!-- NOTE: <Improve> : I don't like using CTM at all.  Need a better way of swimming into this cave.
											Also, this shouldn't execute after entering the cave.

											This logic is also used in Priest-Shadow stage 2. -->
					<Code File="MyCTM" X="2148.117" Y="2335.397" Z="100.6413" />
					<Code File="MyCTM" X="2145.281" Y="2336.206" Z="84.55514" />
					<Code File="MyCTM" X="2128.243" Y="2341.831" Z="67.68755" />
					<Code File="MyCTM" X="2109.654" Y="2353.573" Z="61.65699" />
					<Code File="MyCTM" X="2090.664" Y="2358.6" Z="65.91748" />
					<Code File="MyCTM" X="2052.529" Y="2343.071" Z="65.91656" />
					<MoveTo X="1995.469" Y="2337.511" Z="75.41196" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 5" >
					<Code File="Hooks\DoWhen" ActivityName="InterruptTendrils" AllowUseDuringCombat="true" UseWhen="Me.CurrentTarget != null &amp;&amp; Me.CurrentTarget.Distance &lt; 7.5 &amp;&amp; Me.CurrentTarget.IsCasting &amp;&amp; SpellManager.CanCast(6552)" >
						<Code File="RunCode" Code="SpellManager.Cast(6552); await Coroutine.Sleep(750);" />
					</Code>
					<Code File="KillUntilComplete" MobId="104583" X="1962.612" Y="2336.319" Z="80.52009" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 5" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 6" >
					<Code File="KillUntilComplete" MobId="103226" X="1962.637" Y="2336.55" Z="80.3631" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 6" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 7" >
					<MoveTo X="1815.318" Y="2291.549" Z="45.37318" />
					<Code File="WaitTimer" WaitTime="5000" />
					<Code File="KillUntilComplete" MobId="103339" X="1815.318" Y="2291.549" Z="45.37322" TerminateWhen="Unit(103339, u =&gt; u.IsDead) != null || Unit(103339) == null" />
					<MoveTo X="1874.504" Y="2268.625" Z="36.40125" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 8" >
					<MoveTo X="1875.148" Y="2188.221" Z="36.62224" />
					<Code File="InteractWith" MobId="103398" Range="25" X="1875.148" Y="2188.221" Z="36.62224" />
					<Code File="WaitTimer" WaitTime="25000" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 8" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 9" >
					<Code File="KillUntilComplete" MobId="104276" X="1877.2" Y="2171.95" Z="35.84133" TerminateWhen="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber != 9" />
				</If>

				<If Condition="Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber == 10" >
					<Code File="InteractWith" MobId="247877" InteractByLooting="true" WaitTime="1500" X="1883.608" Y="2181.688" Z="35.84459" />
					<Code File="Misc\RunLua" Lua="LootButton1:Click();" /> <!-- Extra code in case the IW doesn't loot. -->
					<Code File="WaitTimer" WaitTime="10000" /> <!-- Wait for little cinematic. -->
					<Code File="Misc\RunLua" Lua="ExtraActionButton1:Click();" />
				</If>

				<If Condition="HasItem(128910)" >
					<MoveTo X="1880.228" Y="2204.396" Z="38.15258" />
					<Code File="MyCTM" X="1880.228" Y="2204.396" Z="38.15258" /> <!-- Ensure we're on the spot -->
					<Code File="WaitTimer" WaitTime="2000" />
					<Code File="Misc\RunLua" Lua="ExtraActionButton1:Click();" />
					<Code File="WaitTimer" WaitTime="8500" TerminateWhen="Me.MapId == 1479" />
				</If>
			</While>
			<TurnIn QuestName="The Sword of Kings" QuestId="41105" TurnInName="Odyn" TurnInId="96469" X="796.1858" Y="7228.977" Z="106.7501" />
		<!-- END Story: Artifact Weapon - Stromkar, the Warbreaker -->


		<If Condition="!IsQuestCompleted(39530)" >
			<PickUp QuestName="The Forgening" QuestId="39530" GiverName="Odyn" GiverId="96469" X="796.1858" Y="7228.977" Z="106.7501" />
			<!-- We're picking this quest up even though it's not artifact specific as a method of preventing the Class Hall loader from loading another artifact profile. -->
			<Code File="LoadProfile" ProfileName="../Class Hall Loaders/Warrior.xml" />
		</If>

	</QuestOrder>
</HBProfile>

<!-- Notes:

	The Forgening is used to determine if we've got the first artifact or not because NPC positions change after this quest.
	Checking if this quest is completed can be used to determine where the NPCs are at for the bot and where we should look for them.
	The Forgening is completed directly after completing obtaining your first artifact weapon, so it should be reliable enough to check with.

	Contiuing the Legend is the quest to unlock your second artifact choice.

	One Last Adventure is the quest to unlock your third artifact choice.
-->