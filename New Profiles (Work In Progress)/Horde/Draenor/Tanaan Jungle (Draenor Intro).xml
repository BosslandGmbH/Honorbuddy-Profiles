<HBProfile xsi:noNamespaceSchemaLocation="../../Schemas/EchoQuestingSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<!-- Original contribution by EchoTiger -->
	<Name>Tanaan Jungle (Draenor Intro) ($Rev: 6041 $)</Name>

	<DefaultNavType>Fly</DefaultNavType>

	<MinDurability>0.3</MinDurability>
	<MinFreeBagSlots>3</MinFreeBagSlots>

	<SellGrey>true</SellGrey>
	<SellWhite>true</SellWhite>
	<SellGreen>true</SellGreen>
	<SellBlue>true</SellBlue>
	<SellPurple>false</SellPurple>

	<MailGrey>false</MailGrey>
	<MailWhite>true</MailWhite>
	<MailGreen>true</MailGreen>
	<MailBlue>true</MailBlue>
	<MailPurple>true</MailPurple>

	<TargetElites>true</TargetElites>

	<AvoidMobs>
	</AvoidMobs>

	<Mailboxes>
	</Mailboxes>

	<Vendors>
	</Vendors>

	<Blackspots>
	</Blackspots>

	<Blacklist>
	</Blacklist>

	<QuestOrder IgnoreCheckpoints="false" ContinuallySkipToCheckpoints="true" >
		<If Condition="Me.IsAlliance" >
			<Code File="LoadProfile" ProfileName="..\..\Alliance\1-58 Autoloader.xml" RememberProfile="true" />
		</If>
		<!-- RunCode Methods -->
			<Code File="RunCode">
			<![CDATA[
				Bots.Professionbuddy.PBLog.Log(System.Windows.Media.Colors.MediumPurple, "> [Profile Initialization Status] ", System.Windows.Media.Colors.CornflowerBlue, "\n     Auto-Looting	:: Enabled\n     Looting	:: Enabled\n     Game Addons	:: Disabled");
				Lua.DoString("SetCVar('AutoLootDefault', 1);");
				CharacterSettings.Instance.LootMobs = true;
				CharacterSettings.Instance.Save();
				Lua.DoString("for i=1,GetNumAddOns() do local relo=false if IsAddOnLoaded(i) then relo=true DisableAddOn(i) end if relo then relo=nil ReloadUI() end end");
				await Coroutine.Sleep(1500);
				Logging.Write(System.Windows.Media.Colors.MediumPurple, "> [Ready to bot!]");
			]]>
			</Code>
			<Code File="RunCode" Type="Definition">
				<![CDATA[
						bool DoQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (HasQuest(questId) && !IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool NeedsQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (!HasQuest(questId) && !IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool NeedsBreadcrumbQuest(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (IsQuestCompleted(questId)) return false;
							}
							return true;
						}
						bool QuestDone(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								if (HasQuest(questId) && IsQuestCompleted(questId)) return true;
							}
							return false;
						}
						bool QuestFlaggedCompleted(params uint[] questIds)
						{
							foreach (var questId in questIds)
							{
								return Lua.GetReturnVal<bool>($"return IsQuestFlaggedCompleted({questId});", 0);
							}
							return false;
						}
						async Task SkipCutscene(int preWait = 3000, int postWait = 3000)
						{
					// Add detection of cutscene here.
							await Coroutine.Sleep(preWait);
					// Test and improve the working method.
							Lua.DoString("MovieFrame:StopMovie(); CinematicFrame_CancelCinematic(); StopCinematic();");
							await Coroutine.Sleep(postWait);
						}
					]]>
			</Code>
		<!-- END RunCode Methods -->

		<!-- Hooks -->
			<Code File="RunCode" Type="Definition">
				<![CDATA[ 
					IEnumerable<WoWItem> GetExtraConsumables()
					{
						uint foodCount = 0;
						uint drinkCount = 0;
						// Skip conjured and buff comsumables.
				
						var extraConsumables = (from item in Me.BagItems
										   where item != null && item.ItemInfo != null
										   let isFood = Consumable.IsFood(item.ItemInfo)
										   let isDrink = Consumable.IsDrink(item.ItemInfo)
										   where (isFood || isDrink) && item.ItemInfo.SellPrice > 0 && item.Effects.Count == 1 && item.ItemInfo.RequiredLevel < Me.Level - 10                    
										   select item).ToList();
				
				
						var extraPotions = Me.BagItems
							.Where(c => c != null && c.IsValid && c.ItemInfo != null && c.ItemInfo.SellPrice > 0 && c.Effects.Count == 1
								&& (c.ItemInfo.ConsumableClass == WoWItemConsumableClass.Potion
								|| c.ItemInfo.ConsumableClass == WoWItemConsumableClass.Elixir
								|| c.ItemInfo.ConsumableClass == WoWItemConsumableClass.Flask)
								&& c.ItemInfo.RequiredLevel < Me.Level - 20);
				
						extraConsumables.AddRange(extraPotions);
						return extraConsumables;
					}
					 
					async Task SellExtraConsumables()
					{
						Logging.Write("Selling items in GetExtraConsumables()");
						foreach (var item in GetExtraConsumables())
						{
							Logging.Write("Selling {0}.", item.Name);
							item.UseContainerItem();
							await Coroutine.Sleep(1337);
						}
					}
				]]>
			</Code>
			<Code File="Hooks\DoWhen" AllowExecutionWhileNotAlive="false"  AllowUseWhileMounted="true" ActivityName="SellExtraConsumables" UseWhen="MerchantFrame.Instance.IsVisible &amp;&amp; GetExtraConsumables().Any()" >
				<Code File="RunCode" Code="await SellExtraConsumables();"/>
			</Code>
		<!-- END Hooks -->


	</QuestOrder>
</HBProfile>