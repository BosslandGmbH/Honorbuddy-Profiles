<HBProfile>
	<QuestOrder>

		<CustomBehavior File="RunCode">
		<![CDATA[
			TreeHooks.Instance.InsertHook("Questbot_Profile", 0,
				_rareHuntComposite ?? (_rareHuntComposite = new  CommonBehaviors.Actions.ActionRunCoroutine(ctx => RareHunt())));	
		]]>
		</CustomBehavior>

		<CustomBehavior File="RunCode" Type="Definition" ><![CDATA[
				private List<WoWGuid> _rareBlacklist = new List<WoWGuid>();
				private bool _rareIsLogged = false;
				private Styx.TreeSharp.Composite _rareHuntComposite;
				private WoWUnit _rarePoi;
				private Vector3 _rareLocation; 

				public async Task<bool> RareHunt()
				{
					if (!_rareLocation.Equals(new Vector3(0,0,0)) && _rareLocation.DistanceSquared((WoWMovement.ActiveMover ?? StyxWoW.Me).Location) > 5 * 5)
					{
						TreeRoot.StatusText = $"Moving to kill rare: {_rarePoi.Name}";
						return (await CommonCoroutines.MoveTo(_rareLocation)).IsSuccessful();
					}

					if (_rarePoi == null || !_rarePoi.IsValid)
					{
						_rarePoi = ObjectManager.GetObjectsOfType<WoWUnit>().OrderBy(unit => unit.DistanceSqr).FirstOrDefault(unit => !_rareBlacklist.Contains(unit.Guid) && !BlackspotManager.IsBlackspotted(unit.Location) && unit.CreatureRank == WoWUnitClassificationType.Rare && !unit.IsTagged && unit.Attackable);
						if (_rarePoi == null) return false;
						if (Navigator.LookupPathInfo(_rarePoi).Navigability != PathNavigability.Navigable)
						{
							_rareBlacklist.Add(_rarePoi.Guid);
							Logging.Write(System.Windows.Media.Colors.DeepSkyBlue, $"[ProfileBase]: Rare NPC detected near us, but we can't navigate to it!\n	Name     :: {_rarePoi.Name}\n	Entry    :: {_rarePoi.Entry}\n	Location :: {_rarePoi.Location}");
							_rarePoi = null;
							return false;
						}
						_rareLocation = _rarePoi.Location;
						return true;
					}

					if (!_rareIsLogged)
					{
						_rareIsLogged = true;
						Logging.Write(System.Windows.Media.Colors.DeepSkyBlue, $"[ProfileBase]: Rare detected near us!\n	Name     :: {_rarePoi.Name}\n	Entry    :: {_rarePoi.Entry}\n	Location :: {_rarePoi.Location}");
					}
					
					if (_rarePoi == null || !_rarePoi.IsValid || _rarePoi.IsDead)
					{
						_rareIsLogged = false;
						_rareLocation = new Vector3(0,0,0);
						_rareBlacklist.Add(_rarePoi.Guid);
						return false;
					}

					TreeRoot.StatusText = $"Killing rare: {_rarePoi.Name}";

					if (_rarePoi.IsAlive)
					{
						BotPoi.Current = new BotPoi(_rarePoi, PoiType.Kill);
						return true;
					}

					return false;
				}
		]]>
		</CustomBehavior>

		<Code File="WaitTimer" WaitTime="12345678" />

	</QuestOrder>
</HBProfile>
